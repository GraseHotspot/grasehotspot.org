{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/documentation/v4-nightly-builds","result":{"data":{"mdx":{"id":"aca6c51d-d103-5a91-83c0-9315cb6aece9","excerpt":"These are instructions for the currently V4 nightly builds to get up and running to help test V4. Clean install Ubuntu 18.04 server (please don’t install…","fields":{"slug":"/documentation/v4-nightly-builds/"},"frontmatter":{"title":"V4 Alpha Builds","description":null,"image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"V4 Alpha Builds\",\n  \"date\": \"2020-07-25T18:11:22+10:00\",\n  \"status\": \"publish\",\n  \"permalink\": \"/documentation/v4-nightly-builds\",\n  \"author\": \"tim\",\n  \"excerpt\": \"\",\n  \"type\": \"page\",\n  \"id\": 496\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"These are instructions for the currently V4 nightly builds to get up and running to help test V4.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Clean install Ubuntu 18.04 server (please don\\u2019t install desktop components unless you know how to disable systemd-resolved and other networking components that get in the way)\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"During the install, you will need to configure your network cards. Only configure your WAN interface, leave your LAN interface unconfigured.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Setup the Grase development APT repository  \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"echo deb https://apt.grasehotspot.org/dev bionic main | sudo tee /etc/apt/sources.list.d/grase.list\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Add the APT repo key  \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"sudo wget https://github.com/GraseHotspot/grase-repo/raw/master/key/grase.hotspot.2020.gpg -O /etc/apt/trusted.gpg.d/grase.hotspot.2020.gpg\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Update APT database  \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"sudo apt update\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Install the required Grase packages. As part of the install there are a few database questions, you can just accept the defaults  \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"sudo apt install grase-www-portal\\n\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"sudo apt install grase-conf-freeradius grase-conf-dnsmasq coova-chilli\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Run the first-run wizard, this will ask questions to setup the network, and the admin password  \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"sudo -u www-data /usr/share/grase/symfony4/bin/console grase:first-run\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Reboot\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The Grase system should now be up and running, you should be able to access the admin interface from either the LAN or WAN interface, by going to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://<IP ADDRESS>/grase\"), \" (replacing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<IP ADDRESS>\"), \" with the correct ip address for the LAN/WAN interface). Username is admin and you set the password in the first run wizard.\"))), mdx(\"h2\", {\n    \"id\": \"v3-to-v4-migration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#v3-to-v4-migration\",\n    \"aria-label\": \"v3 to v4 migration permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"V3 to V4 Migration\"), mdx(\"p\", null, \"If you wish to test the migration from V3, you need to get your latest database backups (located in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/var/backups/grase\"), \") there will be a mysql\", \"_\", \"radius backup and a mysql\", \"_\", \"radmin backup file. You can then use the following command to load the V3 backup into your V4 server. This will delete the entire database on the server, load the V3 database, migrate into the V4 structure. You will then need to run the first-run wizard from above again.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"sudo -u www-data /usr/share/grase/symfony4/bin/console grase:migrate-v3-backup mysql_radius_backup.sql mysql_radmin_backup.sql\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"V3 to V4 Migration"}]}},"pageContext":{"slug":"/documentation/v4-nightly-builds/","prev":{"label":"Known Issues","link":"/documentation/known-issues"},"next":{"label":"FAQ","link":"/documentation/faq"},"repositoryEditUrl":"https://github.com/GraseHotspot/grasehotspot.org/tree/main/src/docs/documentation/v4-nightly-builds.md","repositoryProvider":"GitHub"}},"staticQueryHashes":["1954253342","2328931024","2501019404","973074209"]}